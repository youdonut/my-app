{"version":3,"sources":["components/Header.js","components/MemeGenerator.js","App.js","reportWebVitals.js","index.js","components/MemeGenerator.module.css"],"names":["Header","props","MemeGenerator","handleChange","event","target","name","value","setState","handleSubmit","preventDefault","randNum","Math","floor","random","state","allMemeImgs","length","randMemeImg","url","randomImg","topText","bottomText","fetch","then","response","json","boxCount","data","memes","filter","e","box_count","className","styles","container","formContainer","onSubmit","this","type","placeholder","onChange","imgContainer","src","alt","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"4OAWeA,MARf,SAAgBC,GACZ,OACI,iCACI,mD,mDCqDGC,E,kDAvDX,aAAe,IAAD,8BACV,gBAkBJC,aAAe,SAACC,GACZ,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACd,EAAKC,SAAL,eACKF,EAAOC,KAtBF,EAyBdE,aAAe,SAACL,GACZA,EAAMM,iBACN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAW,EAAKC,MAAMC,YAAYC,QAC5DC,EAAc,EAAKH,MAAMC,YAAYL,GAASQ,IACpD,EAAKX,SAAS,CACVY,UAAWF,KA5Bf,EAAKH,MAAQ,CACTM,QAAS,GACTC,WAAY,GACZF,UAAW,mCACXJ,YAAa,IANP,E,qDASd,WAAqB,IAAD,OAChBO,MAAM,qCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACF,IACIE,EADcF,EAASG,KAAnBC,MACaC,QAAO,SAAAC,GAAC,OAAoB,IAAhBA,EAAEC,aACnC,EAAKxB,SAAS,CAAEQ,YAAaW,S,oBAmBzC,WACI,OACI,sBAAKM,UAAWC,IAAOC,UAAvB,UACI,uBAAMF,UAAWC,IAAOE,cAAeC,SAAUC,KAAK7B,aAAtD,UACI,uBAAOH,KAAK,UAAUiC,KAAK,OAAOC,YAAY,WAAWjC,MAAO+B,KAAKvB,MAAMM,QAASoB,SAAUH,KAAKnC,eACnG,uBAAOG,KAAK,aAAaiC,KAAK,OAAOC,YAAY,cAAcjC,MAAO+B,KAAKvB,MAAMO,WAAYmB,SAAUH,KAAKnC,eAC5G,iDAEJ,qBAAK8B,UAAWC,IAAOC,UAAvB,SACI,sBAAKF,UAAWC,IAAOQ,aAAvB,UACI,qBAAKC,IAAKL,KAAKvB,MAAMK,UAAWwB,IAAI,KACpC,oBAAIX,UAAWC,IAAOb,QAAtB,SAAgCiB,KAAKvB,MAAMM,UAC3C,oBAAIY,UAAWC,IAAOZ,WAAtB,SAAmCgB,KAAKvB,MAAMO,yB,GA/C1CuB,aCUbC,MATf,WACE,OACE,qCACA,cAAC,EAAD,IACA,cAAC,EAAD,QCIWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K,kBCfAa,EAAOC,QAAU,CAAC,UAAY,iCAAiC,aAAe,oCAAoC,QAAU,+BAA+B,WAAa,kCAAkC,cAAgB,wC","file":"static/js/main.907662c7.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Header.module.css';\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <header>\r\n            <h1>Meme Generator</h1>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport styles from './MemeGenerator.module.css'\r\n\r\nclass MemeGenerator extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            topText: \"\",\r\n            bottomText: \"\",\r\n            randomImg: \"https://i.imgflip.com/1ur9b0.jpg\",\r\n            allMemeImgs: []\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const { memes } = response.data\r\n                let boxCount = memes.filter(e => e.box_count === 2)\r\n                this.setState({ allMemeImgs: boxCount })\r\n            })\r\n    }\r\n    // Change to use arrow functions\r\n    handleChange = (event) => {\r\n        const { name, value } = event.target\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n    handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\r\n        const randMemeImg = this.state.allMemeImgs[randNum].url\r\n        this.setState({\r\n            randomImg: randMemeImg\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.container}>\r\n                <form className={styles.formContainer} onSubmit={this.handleSubmit}>\r\n                    <input name=\"topText\" type=\"text\" placeholder=\"Top Text\" value={this.state.topText} onChange={this.handleChange} />\r\n                    <input name=\"bottomText\" type=\"text\" placeholder=\"Bottom Text\" value={this.state.bottomText} onChange={this.handleChange} />\r\n                    <button>Generate</button>\r\n                </form>\r\n                <div className={styles.container}>\r\n                    <div className={styles.imgContainer}>\r\n                        <img src={this.state.randomImg} alt=\"\" />\r\n                        <h1 className={styles.topText}>{this.state.topText}</h1>\r\n                        <h1 className={styles.bottomText}>{this.state.bottomText}</h1>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MemeGenerator;","import './App.css';\nimport Header from './components/Header';\nimport MemeGenerator from './components/MemeGenerator';\n\nfunction App() {\n  return (\n    <>\n    <Header/>\n    <MemeGenerator/>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MemeGenerator_container__2IFS1\",\"imgContainer\":\"MemeGenerator_imgContainer__1nAXv\",\"topText\":\"MemeGenerator_topText__169sO\",\"bottomText\":\"MemeGenerator_bottomText__305BM\",\"formContainer\":\"MemeGenerator_formContainer__2H8p7\"};"],"sourceRoot":""}